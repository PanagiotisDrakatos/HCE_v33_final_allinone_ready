name: CI

on:
  workflow_dispatch:
    inputs:
      run_integration:
        description: "Run integration tests"
        type: boolean
        default: false

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.12"

jobs:
  lint_and_unit:
    name: Lint & Unit
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install project and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install pytest-xdist ruff black

      - name: Ruff Lint
        run: ruff check .

      - name: Black Format Check
        run: black --check .

      - name: Run Unit Tests with Coverage (fallback-safe)
        run: |
          if python -c "import xdist" 2>/dev/null; then
            echo "✅ Running with xdist"
            pytest -q -m "not integration" -n auto \
              --cov=hcebt --cov=lib --cov-report=xml --cov-report=term-missing
          else
            echo "⚠️ Running single-threaded (no xdist)"
            pytest -q -m "not integration" \
              --cov=hcebt --cov=lib --cov-report=xml --cov-report=term-missing
          fi

      - name: Upload coverage report (main only)
        if: github.ref == 'refs/heads/main' && env.ACT != 'true'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  integration:
    name: Integration Tests (on demand)
    runs-on: ubuntu-latest
    timeout-minutes: 35
    needs: [lint_and_unit]
    if: |
      github.event_name == 'workflow_dispatch' && inputs.run_integration == true

    services:
      clickhouse:
        image: clickhouse/clickhouse-server:23.8
        ports: ['8123:8123']
        options: >-
          --health-cmd="wget -qO- http://localhost:8123/ping || exit 1"
          --health-interval=5s --health-timeout=2s --health-retries=30

      timescale:
        image: timescale/timescaledb:2.16.1-pg15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hce
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U postgres -d hce"
          --health-interval=5s --health-timeout=2s --health-retries=30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install project and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Run Integration Tests (GitHub services)
        env:
          IT_CLICKHOUSE: "1"
          IT_TIMESCALE: "1"
          CLICKHOUSE_URL: "http://localhost:8123"
          TIMESCALE_DSN: "postgresql://postgres:postgres@localhost:5432/hce"
        run: |
          pytest -q -m "integration"

  ci_logs:
    name: Collect CI logs (ruff/black/pytest)
    runs-on: ubuntu-latest
    needs: [lint_and_unit]
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v6
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt || true; fi
          pip install ruff black pytest || true
      - name: Run and capture outputs
        run: |
          mkdir -p ci_logs
          echo "==== ruff ====\n"    > ci_logs/ruff.txt;  (ruff check . || true)    2>&1 | tee -a ci_logs/ruff.txt
          echo "==== black ====\n"  > ci_logs/black.txt; (black --check . || true) 2>&1 | tee -a ci_logs/black.txt
          echo "==== pytest ====\n" > ci_logs/pytest.txt; (pytest -q || true)      2>&1 | tee -a ci_logs/pytest.txt
      - uses: actions/upload-artifact@v4
        with:
          name: ci-logs
          path: ci_logs/

  post_fail_comment:
    name: PR comment with CI excerpts
    needs: [ci_logs]
    if: ${{ failure() && github.event_name == 'pull_request' && env.ACT != 'true' }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ci-logs
          path: ci_logs
      - uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            function tailFile(p) {
              try { return fs.readFileSync(p, 'utf8').slice(-4000); } catch { return '[missing]'; }
            }
            const ruff = tailFile(path.join('ci_logs','ruff.txt'));
            const black = tailFile(path.join('ci_logs','black.txt'));
            const pytest = tailFile(path.join('ci_logs','pytest.txt'));
            const body = [
              '### ❌ CI failed — key excerpts',
              '```txt\n[ruff]\n' + ruff + '\n```',
              '```txt\n[black]\n' + black + '\n```',
              '```txt\n[pytest]\n' + pytest + '\n```',
              '> Tip: run `gh run view --log` locally or use the ci:grab script.'
            ].join('\n\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });
