name: CI

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:
    inputs:
      run_integration:
        description: "Run integration tests"
        type: boolean
        default: false

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint_and_unit:
    name: Lint & Unit (fast)
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install project and dependencies
        run: |
          python -m pip install -U pip
          pip install -e .  # ðŸ›  install local package (resolves ModuleNotFoundError)
          pip install -r requirements.txt -r requirements-dev.txt
          pip install pytest-xdist

      - name: Detect changed Python files
        id: diff
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            base="${{ github.event.pull_request.base.sha }}"
            head="${{ github.event.pull_request.head.sha }}"
          else
            git fetch --no-tags --depth=1 origin main || true
            base=$(git merge-base HEAD origin/main || echo HEAD^)
            head="${GITHUB_SHA}"
          fi
          files=$(git diff --name-only "$base" "$head" | grep -E '\.py$' || true)
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$files" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Run Ruff (lint)
        run: |
          files="${{ steps.diff.outputs.files }}"
          if [[ -n "$files" ]]; then
            echo "$files" | tr '\n' ' ' | xargs -r ruff check --select I,E,F,UP
          else
            ruff check --select I,E,F,UP .
          fi

      - name: Run Black (format check)
        run: |
          files="${{ steps.diff.outputs.files }}"
          if [[ -n "$files" ]]; then
            echo "$files" | tr '\n' ' ' | xargs -r black --check
          else
            black --check .
          fi

      - name: Run Unit Tests with Coverage
        run: |
          pytest -q -n auto -m "not integration" \
            --cov=hcebt --cov=lib --cov-report=xml

      - name: Upload coverage to Codecov (main only)
        if: github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  integration:
    name: Integration Tests (on demand)
    runs-on: ubuntu-latest
    timeout-minutes: 35
    needs: [lint_and_unit]
    if: |
      github.event_name == 'workflow_dispatch' && inputs.run_integration == true ||
      (github.event_name == 'push' && contains(github.event.head_commit.message, '[it]')) ||
      (github.event_name == 'pull_request' && contains(github.head_ref, 'it/'))

    services:
      clickhouse:
        image: clickhouse/clickhouse-server:23.8
        ports: ['8123:8123']
        options: >-
          --health-cmd="wget -qO- http://localhost:8123/ping || exit 1"
          --health-interval=5s --health-timeout=2s --health-retries=30

      timescale:
        image: timescale/timescaledb:2.16.1-pg15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: hce
        ports: ['5432:5432']
        options: >-
          --health-cmd="pg_isready -U postgres -d hce"
          --health-interval=5s --health-timeout=2s --health-retries=30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Install project and dependencies
        run: |
          python -m pip install -U pip
          pip install -e .
          pip install -r requirements.txt -r requirements-dev.txt

      - name: Run Integration Tests
        env:
          IT_CLICKHOUSE: "1"
          IT_TIMESCALE: "1"
          CLICKHOUSE_URL: "http://localhost:8123"
          TIMESCALE_DSN: "postgresql://postgres:postgres@localhost:5432/hce"
        run: |
          pytest -q -m "integration"
