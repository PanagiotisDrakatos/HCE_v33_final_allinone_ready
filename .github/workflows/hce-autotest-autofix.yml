name: HCE Python CI (lint, unit, integration)

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

permissions:
  contents: read

concurrency:
  group: hce-python-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      IT_TIMESCALE: '1'
      IT_CLICKHOUSE: '1'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black ruff pytest-cov pip-audit

      - name: Lint (ruff)
        run: ruff check .

      - name: Format check (black)
        run: black --check .

      - name: Unit tests (no integration)
        run: pytest -q

      - name: Start DB services (Docker Compose)
        run: |
          docker compose -f docker-compose.yml up -d
          sudo apt-get update && sudo apt-get install -y postgresql-client curl
          echo "Waiting for Postgres..."
          for i in {1..60}; do
            if pg_isready -h 127.0.0.1 -p 5432 -U postgres; then echo "Postgres ready"; break; fi; sleep 2; done
          echo "Waiting for ClickHouse..."
          for i in {1..60}; do
            if curl -fsS http://127.0.0.1:8123/ping | grep -qi "ok"; then echo "ClickHouse ready"; break; fi; sleep 2; done

      - name: Integration tests
        run: pytest -q -m integration

      - name: Security audit (pip-audit) [non-blocking]
        continue-on-error: true
        run: pip-audit -r requirements.txt

      - name: Teardown services
        if: always()
        run: docker compose -f docker-compose.yml down -v

      - name: Upload coverage & reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: python-ci-artifacts
          path: |
            coverage.xml
            .coverage
            .pytest_cache/
            reports/
            logs/

  test-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install ruff black

      - name: Apply autofix (ruff/black)
        run: |
          ruff check . --fix || true
          black . || true

      - name: Lint (ruff, no-fix)
        run: ruff check .

      - name: Run tests (pytest)
        run: pytest

      - name: Commit & push only if all checks passed
        if: ${{ success() }}
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            git config user.name "HCE AutoFix Bot"
            git config user.email "autofix@bot.local"
            git add -A
            git commit -m "chore(hce): auto-fix ruff/black after green CI"
            git push
          else
            echo "No changes to commit."
          fi

      - name: Upload coverage & junit (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: hce-ci-artifacts
          path: |
            coverage/
            coverage.xml
            .coverage
            logs/
